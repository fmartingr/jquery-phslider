// Generated by CoffeeScript 1.3.3
(function() {

  (function($, window) {
    var $actualSlide, Plugin, actualSlide, defaults, nextSlide, pluginName, previousSlide, slidesNumber, _slideshowRunning, _styles;
    pluginName = 'phslider';
    defaults = {
      width: 0,
      height: 0,
      duration: 1,
      animation: 'fade',
      animationDuration: 2000,
      onInit: function(totalSlides) {},
      onSlideChange: function(slide, totalSlides) {}
    };
    actualSlide = 1;
    nextSlide = 1;
    previousSlide = null;
    $actualSlide = null;
    slidesNumber = 0;
    _styles = null;
    _slideshowRunning = true;
    Plugin = (function() {

      function Plugin(element, options) {
        this.element = element;
        this.options = $.extend({}, defaults, options);
        this._defaults = defaults;
        this._name = pluginName;
        this.init();
      }

      Plugin.prototype.init = function() {
        slidesNumber = $(this.element).children(".slide").length;
        $(this.element).children('.slide').each(function() {
          return $(this).attr('data-slide', $(this).index() + 1);
        });
        if (!this.options.width && !this.options.height) {
          this.options.width = $(this.element).parent.width;
          this.options.height = $(this.element).parent.height;
        } else {
          $(this.element).width(this.options.width);
          $(this.element).height(this.options.height);
        }
        this.createViewport();
        this.prepareStyles();
        this.prepareSlides();
        this.options.onInit(slidesNumber);
        this.prepareButtons();
        return this.start();
      };

      Plugin.prototype.prepareButtons = function() {
        var _this = this;
        $('*[data-phslider="nextButton"]').click(function() {
          return _this.next(true);
        });
        $('*[data-phslider="prevButton"]').click(function() {
          return _this.prev(true);
        });
        return $('*[data-phslider="slideToButton"]').click({
          plg: this
        }, function(e) {
          var slide;
          slide = parseInt($(this).attr('data-slide'));
          e.data.plg.slideTo(slide);
          return e.data.plg.pause();
        });
      };

      Plugin.prototype.prepareStyles = function() {
        return _styles = {
          first: {
            display: 'block'
          },
          reset: {
            opacity: 1
          },
          slidetop: {
            actualSlide: {
              position: 'absolute'
            },
            actualSlideAnimationTo: {
              top: -1 * this.getViewportHeight()
            },
            nextSlide: {
              display: 'block',
              left: 0,
              position: 'absolute',
              top: this.getViewportHeight()
            },
            nextSlideAnimationTo: {
              top: 0
            }
          },
          slideright: {
            actualSlide: {
              position: 'absolute'
            },
            actualSlideAnimationTo: {
              left: this.getViewportWidth()
            },
            nextSlide: {
              display: 'block',
              left: -1 * this.getViewportWidth(),
              position: 'absolute',
              top: 0
            },
            nextSlideAnimationTo: {
              left: 0
            }
          },
          slidebottom: {
            actualSlide: {
              position: 'absolute'
            },
            actualSlideAnimationTo: {
              top: this.getViewportHeight()
            },
            nextSlide: {
              display: 'block',
              left: 0,
              position: 'absolute',
              top: -1 * this.getViewportHeight()
            },
            nextSlideAnimationTo: {
              top: 0
            }
          },
          slideleft: {
            actualSlide: {
              position: 'absolute'
            },
            actualSlideAnimationTo: {
              left: -1 * this.getViewportWidth()
            },
            nextSlide: {
              display: 'block',
              left: this.getViewportWidth(),
              position: 'absolute',
              top: 0
            },
            nextSlideAnimationTo: {
              left: 0
            }
          },
          fade: {
            actualSlide: {
              position: 'absolute',
              display: 'block',
              left: 0,
              top: 0,
              opacity: 1,
              'z-index': 10
            },
            actualSlideAnimationTo: {
              opacity: 0
            },
            nextSlide: {
              position: 'absolute',
              display: 'block',
              left: 0,
              top: 0,
              opacity: 0,
              'z-index': 1
            },
            nextSlideAnimationTo: {
              opacity: 1
            }
          }
        };
      };

      Plugin.prototype.createViewport = function() {
        return $(this.element).css({
          height: this.options.height,
          position: 'relative',
          overflow: 'hidden',
          width: this.options.width
        });
      };

      Plugin.prototype.prepareSlides = function() {
        var i, _i;
        for (i = _i = 1; 1 <= slidesNumber ? _i <= slidesNumber : _i >= slidesNumber; i = 1 <= slidesNumber ? ++_i : --_i) {
          $(this.element).children("[data-slide='" + i + "']").css({
            width: this.options.width,
            height: this.options.height,
            display: 'none'
          });
        }
        return $(this.element).children('[data-slide="1"]').css(_styles.first);
      };

      Plugin.prototype.start = function() {
        this.getNextSlide();
        this.getDataFromSlide(actualSlide);
        this.options.onSlideChange($actualSlide, slidesNumber);
        return this.play();
      };

      Plugin.prototype.waitForNextSlide = function() {
        var waitTime;
        waitTime = $actualSlide.duration;
        if (_slideshowRunning) {
          return setTimeout($.proxy(this.autoSlide, this), waitTime * 1000);
        }
      };

      Plugin.prototype.autoSlide = function() {
        if (_slideshowRunning) {
          return this.next();
        }
      };

      Plugin.prototype.slideTo = function(_slide) {
        this.animate(_slide);
        actualSlide = _slide;
        this.getDataFromSlide(actualSlide);
        this.options.onSlideChange($actualSlide, slidesNumber);
        this.getNextSlide();
        this.getPreviousSlide();
        if (_slideshowRunning) {
          return this.waitForNextSlide();
        }
      };

      Plugin.prototype.animate = function(_slide) {
        var _actual, _next;
        _actual = $(this.element).children("[data-slide='" + actualSlide + "']");
        _next = $(this.element).children("[data-slide='" + _slide + "']");
        _next.css(_styles[$actualSlide.animation].nextSlide);
        _actual.css(_styles[$actualSlide.animation].actualSlide);
        _next.animate(_styles[$actualSlide.animation].nextSlideAnimationTo);
        _actual.animate(_styles[$actualSlide.animation].actualSlideAnimationTo);
        _actual.css(_styles.reset);
        return _next.css(_styles.reset);
      };

      Plugin.prototype.next = function(_manual) {
        this.slideTo(nextSlide);
        if (_manual) {
          return this.pause();
        }
      };

      Plugin.prototype.getNextSlide = function() {
        var next;
        next = actualSlide + 1;
        return nextSlide = next > slidesNumber ? 1 : next;
      };

      Plugin.prototype.prev = function(_manual) {
        this.slideTo(previousSlide);
        if (_manual) {
          return this.pause();
        }
      };

      Plugin.prototype.getPreviousSlide = function() {
        var previous;
        previous = actualSlide - 1;
        return previousSlide = previous < 1 ? slidesNumber : previous;
      };

      Plugin.prototype.pause = function() {
        _slideshowRunning = false;
        return console.log("Pause: " + _slideshowRunning);
      };

      Plugin.prototype.play = function() {
        _slideshowRunning = true;
        return this.waitForNextSlide();
      };

      Plugin.prototype.getDataFromSlide = function(_slide) {
        var _element;
        _element = $(this.element).children("[data-slide='" + _slide + "']");
        return $actualSlide = {
          slide: parseInt(_element.attr('data-slide')),
          duration: _element.attr('data-duration') || this.options.duration,
          animation: _element.attr('data-animation') || this.options.animation,
          animationDuration: _element.attr('data-animationDuration') || this.options.animationDuration
        };
      };

      Plugin.prototype.getViewportWidth = function() {
        return this.options.width;
      };

      Plugin.prototype.getViewportHeight = function() {
        return this.options.height;
      };

      return Plugin;

    })();
    return $.fn[pluginName] = function(options) {
      return this.each(function() {
        if (!$.data(this, "plugin_" + pluginName)) {
          return $.data(this, "plugin_" + pluginName, new Plugin(this, options));
        }
      });
    };
  })(jQuery, window);

}).call(this);
